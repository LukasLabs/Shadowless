<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta content="width=device-width, initial-scale=1.0" name="viewport"/>
    <title><%= settings.name %> - Resources Management</title>
    <link rel="icon" type="image/png" href="https://i.imgur.com/GY3cXet.png">
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet"/>
    <style>
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        .animate-fade-in {
            animation: fadeIn 0.3s ease-out forwards;
        }
        .shadow-glow {
            box-shadow: 0 0 15px rgba(99, 102, 241, 0.3);
        }
        .gradient-text {
            background: linear-gradient(45deg, #6366f1, #8b5cf6);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }
        .bg-grid {
            background-image: radial-gradient(rgba(99, 102, 241, 0.1) 1px, transparent 1px);
            background-size: 20px 20px;
        }
    </style>
</head>
<body class="bg-black text-white min-h-screen">
    <div class="flex">
        <!-- Admin Navigation -->
        <%- include('../components/admin-navigation') %>
        
        <!-- Main Content -->
        <main class="flex-1 ml-72 p-8">
            <!-- Header Section -->
            <div class="relative rounded-2xl overflow-hidden mb-8 animate-fade-in shadow-glow">
                <div class="absolute inset-0 bg-gradient-to-r from-indigo-600/20 to-purple-600/20 backdrop-blur-sm bg-grid"></div>
                <div class="relative p-8">
                    <h1 class="text-4xl font-bold mb-2 gradient-text">Resources Management</h1>
                    <p class="text-gray-300">Manage user resources and coins</p>
                </div>
            </div>

            <!-- Search User -->
            <div class="bg-gray-900/80 border border-indigo-500/20 rounded-xl p-6 mb-8 animate-fade-in shadow-lg">
                <div class="flex items-center space-x-4">
                    <div class="flex-grow">
                        <label class="block text-gray-300 mb-2">Search User</label>
                        <div class="relative">
                            <input type="text" id="searchInput" placeholder="Enter Discord ID or username..." 
                                   class="w-full bg-black/30 border border-indigo-500/20 rounded-lg px-4 py-3 pl-10 focus:outline-none focus:border-indigo-500/50 focus:shadow-glow transition-all">
                            <i class="fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400"></i>
                        </div>
                    </div>
                    <button id="searchButton" class="mt-6 px-6 py-3 rounded-xl bg-gradient-to-r from-indigo-600 to-purple-600 hover:from-indigo-700 hover:to-purple-700 text-white transition-all shadow-lg shadow-indigo-500/20">
                        Search
                    </button>
                </div>
            </div>

            <!-- User Resources Form -->
            <div id="userForm" class="hidden bg-gray-900/80 border border-indigo-500/20 rounded-xl p-6 mb-8 animate-fade-in shadow-lg">
                <form id="resourcesForm">
                    <input type="hidden" id="userId">
                    
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                        <!-- RAM -->
                        <div>
                            <label class="block text-gray-300 mb-2">RAM (MB)</label>
                            <div class="relative">
                                <input type="number" id="ramInput" class="w-full bg-black/30 border border-indigo-500/20 rounded-lg px-4 py-3 focus:outline-none focus:border-indigo-500/50 transition-all">
                                <div class="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400">
                                    <i class="fas fa-memory"></i>
                                </div>
                            </div>
                        </div>

                        <!-- CPU -->
                        <div>
                            <label class="block text-gray-300 mb-2">CPU (%)</label>
                            <div class="relative">
                                <input type="number" id="cpuInput" class="w-full bg-black/30 border border-indigo-500/20 rounded-lg px-4 py-3 focus:outline-none focus:border-indigo-500/50 transition-all">
                                <div class="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400">
                                    <i class="fas fa-microchip"></i>
                                </div>
                            </div>
                        </div>

                        <!-- Disk -->
                        <div>
                            <label class="block text-gray-300 mb-2">Disk (MB)</label>
                            <div class="relative">
                                <input type="number" id="diskInput" class="w-full bg-black/30 border border-indigo-500/20 rounded-lg px-4 py-3 focus:outline-none focus:border-indigo-500/50 transition-all">
                                <div class="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400">
                                    <i class="fas fa-hdd"></i>
                                </div>
                            </div>
                        </div>

                        <!-- Servers -->
                        <div>
                            <label class="block text-gray-300 mb-2">Server Slots</label>
                            <div class="relative">
                                <input type="number" id="serversInput" class="w-full bg-black/30 border border-indigo-500/20 rounded-lg px-4 py-3 focus:outline-none focus:border-indigo-500/50 transition-all">
                                <div class="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400">
                                    <i class="fas fa-server"></i>
                                </div>
                            </div>
                        </div>

                        <!-- Coins -->
                        <div class="md:col-span-2">
                            <label class="block text-gray-300 mb-2">Coins</label>
                            <div class="relative">
                                <input type="number" id="coinsInput" class="w-full bg-black/30 border border-indigo-500/20 rounded-lg px-4 py-3 focus:outline-none focus:border-indigo-500/50 transition-all">
                                <div class="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400">
                                    <i class="fas fa-coins"></i>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="flex justify-end space-x-4">
                        <button type="button" onclick="resetForm()" class="px-6 py-3 rounded-xl text-gray-300 hover:text-white bg-gray-800 hover:bg-gray-700 transition-all">
                            Reset
                        </button>
                        <button type="submit" class="px-6 py-3 rounded-xl bg-gradient-to-r from-indigo-600 to-purple-600 hover:from-indigo-700 hover:to-purple-700 text-white transition-all shadow-lg shadow-indigo-500/20">
                            Save Changes
                        </button>
                    </div>
                </form>
            </div>

            <!-- Success Message -->
            <div id="successMessage" class="hidden bg-green-500/20 border border-green-500/30 rounded-xl p-4 mb-8 animate-fade-in">
                <div class="flex items-center">
                    <i class="fas fa-check-circle text-green-400 mr-3"></i>
                    <span class="text-green-400">Changes saved successfully!</span>
                </div>
            </div>

            <!-- Error Message -->
            <div id="errorMessage" class="hidden bg-red-500/20 border border-red-500/30 rounded-xl p-4 mb-8 animate-fade-in">
                <div class="flex items-center">
                    <i class="fas fa-exclamation-circle text-red-400 mr-3"></i>
                    <span class="text-red-400" id="errorText">An error occurred</span>
                </div>
            </div>
        </main>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const searchButton = document.getElementById('searchButton');
            const searchInput = document.getElementById('searchInput');
            const userForm = document.getElementById('userForm');
            const resourcesForm = document.getElementById('resourcesForm');
            const successMessage = document.getElementById('successMessage');
            const errorMessage = document.getElementById('errorMessage');

            searchButton.addEventListener('click', async function() {
                const searchTerm = searchInput.value.trim();
                if (!searchTerm) return;

                try {
                    const response = await fetch(`/api/admin/users?discordId=${searchTerm}`);
                    const data = await response.json();

                    if (data.error) {
                        showError(data.error);
                        return;
                    }

                    if (data.length === 0) {
                        showError('User not found');
                        return;
                    }

                    const user = data[0];
                    populateForm(user);
                    userForm.classList.remove('hidden');
                } catch (error) {
                    showError('Failed to fetch user data');
                    console.error(error);
                }
            });

            resourcesForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const userId = document.getElementById('userId').value;
                const data = {
                    ram: document.getElementById('ramInput').value,
                    cpu: document.getElementById('cpuInput').value,
                    disk: document.getElementById('diskInput').value,
                    servers: document.getElementById('serversInput').value,
                    coins: document.getElementById('coinsInput').value
                };

                try {
                    const response = await fetch(`/api/admin/users/${userId}/resources`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(data)
                    });

                    const result = await response.json();

                    if (result.error) {
                        showError(result.error);
                        return;
                    }

                    showSuccess();
                } catch (error) {
                    showError('Failed to update resources');
                    console.error(error);
                }
            });
        });

        function populateForm(user) {
            document.getElementById('userId').value = user.id;
            document.getElementById('ramInput').value = user.ram || 0;
            document.getElementById('cpuInput').value = user.cpu || 0;
            document.getElementById('diskInput').value = user.disk || 0;
            document.getElementById('serversInput').value = user.servers || 0;
            document.getElementById('coinsInput').value = user.coins || 0;
        }

        function resetForm() {
            document.getElementById('resourcesForm').reset();
            document.getElementById('userForm').classList.add('hidden');
            document.getElementById('successMessage').classList.add('hidden');
            document.getElementById('errorMessage').classList.add('hidden');
        }

        function showSuccess() {
            successMessage.classList.remove('hidden');
            errorMessage.classList.add('hidden');
            setTimeout(() => {
                successMessage.classList.add('hidden');
            }, 3000);
        }

        function showError(message) {
            document.getElementById('errorText').textContent = message;
            errorMessage.classList.remove('hidden');
            successMessage.classList.add('hidden');
            setTimeout(() => {
                errorMessage.classList.add('hidden');
            }, 3000);
        }
    </script>
</body>
</html> 